#!/bin/bash
# ------------------------------------------------------------------
# [Denis Kulandin] Title
#          Description
# ------------------------------------------------------------------

# NOTE
# custom script /usr/local/bin/createdb is requred to run this script!

. getopts_long
#http://stchaz.free.fr/getopts_long

VERSION=0.1.3
SUBJECT=gopt24gyuf83
USAGE="Usage: command -rpufhv args/n bash wp-migrate.sh allauto -f/home/dev/web/ngo2.ru/public_html/tstdev -rdev.te-st.ru > log.txt"

#Defaults
REMOTE_USERIP="dev@46.101.60.124"
REMOTE_PASS=""
FOLDER="/home/dev/web/ngo2.ru/public_html/samara42/"
SEARCH="ngo2.ru/testdev"
REPLACE="dev.te-st.ru"

parseconfig=false

#LOCAL_FOLDER=""

#NB! DB user name not longer then 16 symbols
#testru_ 1604140106 _u
#DB prefix must not exceed 6 symbols
DB_PREFIX="testru"
#ngo2.ru/tstnew


# --- Options processing -------------------------------------------
if [ $# == 0 ] ; then
    echo $USAGE
    exit 1;
fi

#read -n 1 -p "Are you shure you want to run wp site migration script?(y/[a]): " AMSURE 
#[ "$AMSURE" = "y" ] || exit
#echo "" 1>&2



#------------------------------------------
sync_all() {
	sync_remote_site
	parse_wp_credentials
	create_local_db
	import_remote_db
	change_wp_config

	SEARCH=$(wp option get home | sed 's~http[s]*://~~g')
	echo "Source URL=$SEARCH"
	change_localdb_url
	change_docroot
}

sync_remote_site() {

	#Questions: 
	#local_folder_name -- datetime?
	#FOLDER_name -- hardcoded?
	#TODO:
	#cp existing existing local site folder and refresh it with remote. Use hardlinks?
	#mode: overwrite or append?

	generate_db_credentials

	
#	mkdir ./$db_name
	echo "cp -al ../orig_testru $db_name"
	cp -al orig_testru $db_name
	cd ./$db_name

	#rsync -avz -e ssh dev@46.101.60.124:/home/dev/web/ngo2.ru/public_html/samara42/ ./
	#echo "rsync -avz -e ssh dev@46.101.60.124:/home/dev/web/ngo2.ru/public_html/samara42/ ./"
#	echo "rsync -avzq --exclude='.git/' -e ssh $REMOTE_USERIP:$FOLDER ./"
#	rsync -avzq --info=progress2 --delete --exclude='.git/' -e  ssh $REMOTE_USERIP:$FOLDER ./
	echo rsync -avzq --delete --exclude='.git/' -e  ssh $REMOTE_USERIP:$FOLDER/ ./
	rsync -avzq --delete --exclude='.git/' -e  ssh $REMOTE_USERIP:$FOLDER/ ./
}

parse_wp_credentials() {
	#Parse wp-config.php for remote database credentials
	#TODO: chec file exists!
	remote_db_name=$(grep "DB_NAME" wp-config.php  | awk '{print substr($2, 2, length($2) - 4)}' | sed "s/'//g")
	remote_db_user=$(grep "DB_USER" wp-config.php  | awk '{print substr($2, 2, length($2) - 4)}' | sed "s/'//g")
	remote_db_pass=$(grep "DB_PASS" wp-config.php  | awk '{print substr($2, 2, length($2) - 4)}' | sed "s/'//g")
}

generate_db_credentials() {
	echo "Generating credentials for local DB"
	db_name=$DB_PREFIX$(date '+%y%m%d%H%M')
	db_user=$db_name
	randpw () { date +%s | sha256sum | base64 | head -c 10 ; echo;}
	db_pass=$(randpw)
}

create_local_db() {
	echo "Creating local DB and user"
	createdb $db_name $db_user $db_pass
	echo createdb $db_name $db_user $db_pass
}

import_remote_db() {
	echo "Importing remote DB to local DB"
	#Keys must be added for server!!!
	echo "ssh -C $REMOTE_USERIP mysqldump --password=$remote_db_pass --user=$remote_db_user $remote_db_name | mysql --password=$db_pass --user=$db_user $db_name"
	ssh -C $REMOTE_USERIP mysqldump -p$remote_db_pass -u$remote_db_user $remote_db_name | mysql -p$db_pass -u$db_user $db_name

	return 0;
}

change_wp_config() {
	echo "Changing DB credentials in wp-config.php"
	echo "sed -i s/\'$remote_db_name\'/\'$db_name\'/g wp-config.php"
	sed -i s/\'$remote_db_name\'/\'$db_name\'/g wp-config.php
	echo "sed -i s/\'$remote_db_user\'/\'$db_user\'/g wp-config.php"
	sed -i s/\'$remote_db_user\'/\'$db_user\'/g wp-config.php
	echo "sed -i s/\'$remote_db_pass\'/\'$db_pass\'/g wp-config.php"
	sed -i s/\'$remote_db_pass\'/\'$db_pass\'/g wp-config.php

#FIXME: REMOVE HARDCODING! sed needs protection \\ before / in ngo2.ru/tstded !!!
	echo sed -i s/\'ngo2.ru\\/tstdev\'/\'$REPLACE\'/g wp-config.php_dk
	sed -i s/\'ngo2.ru\\/tstdev\'/\'$REPLACE\'/g wp-config.php_dk



ngo2.ru/tstdev
}

change_localdb_url() {
	#TODO:
	#Check composer installed
	#Check php is functioning
	#QUESTIONS:
	#2) Will dev url be same always?
	#current method with composer install is unreliable. Fix it!

	current_folder="$(pwd)"
	#scriptdir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/$(basename "${BASH_SOURCE[0]}")"
	cd ..

	echo "COMPOSER DIR IS $(pwd)"	
	echo "composer require interconnectit/search-replace-db"	
	composer require interconnectit/search-replace-db
	echo "php ./vendor/bin/srdb.cli.php -hlocalhost -n$db_name -u$db_user --pass=$db_pass -s$SEARCH -r$REPLACE"
	php ./vendor/bin/srdb.cli.php -hlocalhost -n$db_name -u$db_user --pass=$db_pass -s$SEARCH -r$REPLACE
	echo "composer remove interconnectit/search-replace-db"
	composer remove interconnectit/search-replace-db
	
	cd $current_folder
}

change_docroot() {
	#change_DocumentRoot() {}
	#-reload apache
	echo "TODO:change_docroot()"
}
#------------------------------------------
#As first input is reserved for command then:
OPTLIND=2 
while getopts_long p:f:i:s:r:wvh opt \
   pass required_argument \
   userip required_argument \
   folder required_argument \
   parseconfig no_argument \
   version no_argument \
    help 0 "" "$@"
    do
        case "$opt" in
		p|pass)
			REMOTE_PASS=$OPTLARG
			echo "Remote Pass = $REMOTE_PASS"
			;;
		i|userip)
			REMOTE_USERIP=$OPTLARG
			echo "Remote user and IP = $REMOTE_USERIP"
			;;
		s|search)
			SEARCH=$OPTLARG
			echo "Search = $SEARCH"
			;;
		r|replace)
			REPLACE=$OPTLARG
			echo "Replace = $REPLACE"
			;;
		w|parseconfig)
     			parseconfig=true
			;;
		f|folder)
			FOLDER=$OPTLARG
			echo "Remote Folder = $FOLDER"
			;;
      		v|version)
		        echo "Version $VERSION"
		        exit 0;
		        ;;
		h|help)
			echo $USAGE
			exit 0;
			;;
	      "?")
			echo "Unknown option $opt"
			exit 0;
			;;
	      ":")
			echo "No argument value for option $opt"
			exit 0;
			;;
	esac
done

#shift "$(($OPTLIND - 1))"

# --- Locks -------------------------------------------------------
LOCK_FILE=/tmp/$SUBJECT.lock
if [ -f "$LOCK_FILE" ]; then
   echo "Script is already running"
   exit
fi

trap "rm -f $LOCK_FILE" EXIT
touch $LOCK_FILE

case $1 in
     		allauto)
		        sync_all
			wp plugin activate cloudflare
		        ;;
      		syncsite)
		        sync_remote_site
		        ;;
      		createdb)
			generate_db_credentials
		        create_local_db
		        ;;
      		changeurl)
			cd $FOLDER
			if $parseconfig; then
				parse_wp_credentials
			fi
		        change_localdb_url
		        ;;
      		importdb)
			cd $FOLDER
			parse_wp_credentials
			generate_db_credentials
		        create_local_db
		        import_remote_db
		        ;;
	      "?")
			echo "Unknown command $1"
			exit 0;
			;;
	      *)
			echo "Unknown error while processing commands"
			exit 0;
			;;
esac
